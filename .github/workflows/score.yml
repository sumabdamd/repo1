name: Process file score check

on:
  workflow_dispatch:
  workflow_call:

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find PRs matching "score check details"
        id: find_prs
        run: |
          echo "Fetching PRs with 'score check details' in the title..."
          PR_NUMBERS=$(gh pr list --repo "$GITHUB_REPOSITORY" --limit 100 --json title,number --jq '.[] | select(.title | test("score check details")) | .number')
          PR_NUMBERS_CLEAN=$(echo "$PR_NUMBERS" | xargs)  # Convert newline to space-separated
          echo "Matched PRs: $PR_NUMBERS_CLEAN"
          echo "prs=$PR_NUMBERS_CLEAN" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Process and conditionally merge PRs
        if: steps.find_prs.outputs.prs != ''
        run: |
          for pr_number in ${{ steps.find_prs.outputs.prs }}
          do
            echo "----------"
            echo "Processing PR #$pr_number"

            # Get PR branch name
            PR_BRANCH=$(gh pr view "$pr_number" --json headRefName --jq '.headRefName')
            echo "Branch: $PR_BRANCH"

            # Fetch and checkout the PR branch
            git fetch origin "$PR_BRANCH"
            git checkout "$PR_BRANCH"

            # Check if python_score file exists
            if [ ! -f python_score ]; then
              echo "No 'python_score' file found. Labeling PR as invalid."
              gh pr edit "$pr_number" --add-label "invalid"
              continue
            fi

            # Read and sanitize the score
            RAW_SCORE=$(cat python_score | tr -d '\n\r[:space:]%')
            echo "Raw score: $RAW_SCORE"

            # Check if score is a valid number
            if ! [[ "$RAW_SCORE" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
              echo " Invalid score format. Labeling PR as invalid."
              gh pr edit "$pr_number" --add-label "invalid"
              continue
            fi

            # Compare score with 95 using bc for float-safe comparison
            COMPARE=$(echo "$RAW_SCORE > 95" | bc)
            if [ "$COMPARE" -eq 1 ]; then
              echo "Score is $RAW_SCORE (> 95). Merging PR..."
              gh pr merge "$pr_number" --merge --delete-branch || echo " Merge failed for PR #$pr_number"
            else
              echo " Score is $RAW_SCORE (<= 95). Labeling PR as invalid."
              gh pr edit "$pr_number" --add-label "invalid"
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
