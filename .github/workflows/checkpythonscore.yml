name: Check Python Score and Raise Issue
on:
  workflow_dispatch:
    inputs:
      file_path:
        description: 'Path to the JSON file to check'
        required: true
        default: 'score/check/sample.json'  # You can set a default path, but it's optional

permissions:
  issues: write  # Allow creating issues
  contents: read  # Allow reading code for checking files

jobs:
  check-python-score:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Debug - Output file path
        run: |
          echo "File path received: ${{ github.event.inputs.file_path }}"

      - name: Check if the file exists
        run: |
          # Check if the file exists in the specified path
          file_path="${{ github.event.inputs.file_path }}"
          if [ ! -f "$file_path" ]; then
            echo "File not found: $file_path"
            exit 1
          else
            echo "File found: $file_path"
          fi

      - name: Read and check score from the JSON file
        id: check_score
        run: |
          # Get the file path passed from the workflow_dispatch input
          file_path="${{ github.event.inputs.file_path }}"
          
          if [ -z "$file_path" ]; then
            echo "No valid JSON file found. Exiting."
            exit 1
          fi
          
          echo "Reading $file_path..."
          
          # Use jq to extract the score from the selected JSON file
          score=$(jq '.python_score' "$file_path")
          
          # Debugging: Output the score
          echo "Extracted score from $file_path: $score"
          
          # Check if the score is valid (non-empty and a number)
          if [ -z "$score" ] || ! [[ "$score" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
            echo "Invalid or missing score. Exiting."
            exit 1
          fi

          # Check if the score is less than 98%
          if (( $(echo "$score < 98" | bc -l) )); then
            echo "low_score=true" >> $GITHUB_ENV
          else
            echo "low_score=false" >> $GITHUB_ENV
          fi

      - name: Create GitHub Issue if Python score is below 98%
        if: env.low_score == 'true'
        run: |
          # Define the GitHub token for authentication
          GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          
          # Log the values for debugging
          echo "Creating GitHub Issue with the following details:"
          echo "Title: Python Score Below 98%: Action Required"
          echo "Body: The Python score in the recent metrics submission is below the threshold of 98%. Please investigate the issue. \n\n**Score**: $score"
          
          # Create an issue using GitHub API if score is less than 98%
          response=$(curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "title": "Python Score Below 98%: Action Required",
              "body": "The Python score in the recent metrics submission is below the threshold of 98%. Please investigate the issue. \n\n**Score**: '"$score"',
              "labels": ["python-score", "needs-investigation"]
            }' \
            https://api.github.com/repos/${{ github.repository }}/issues)

          # Log the response from the API
          echo "GitHub API Response: $response"

          # Check if the response contains 'created_at' (indicating the issue was created successfully)
          if [[ "$response" == *"created_at"* ]]; then
            echo "Issue created successfully!"
          else
            echo "Failed to create an issue. Response: $response"
            exit 1
          fi
